name: Continuous Delivery to Production

on:
  push:
    branches: [ "main"]

jobs:
  deploy-production:
    name: Deploy to production server
    environment: Production
    runs-on: self-hosted

    steps:
      - name: Execute deployment command
        uses: appleboy/ssh-action@v1.0.3
        env:
          APP_PROD_PATH: ${{ vars.APP_PROD_PATH }}
          GIT_URL: ${{ secrets.GIT_URL }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          APP_NAME: ${{ secrets.APP_IMAGE }}
          APP_TAG: ${{ github.event.release.tag_name }}

        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER_NAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: APP_PROD_PATH, GIT_URL, POSTGRES_USER, POSTGRES_PASSWORD, POSTGRES_DB, DOCKERHUB_USERNAME, DOCKERHUB_TOKEN, APP_NAME, APP_TAG
          script: |
            
            sudo docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_TOKEN

            if [[ -d "${APP_PROD_PATH}" ]]; then 
              cd $APP_PROD_PATH
              sudo docker compose down
              git pull origin main
            else
              ssh-keyscan github.com > ~/.ssh/known_hosts
              git clone $GIT_URL $APP_PROD_PATH
              cd $APP_PROD_PATH
            fi

            # If there are any envars update
            echo "POSTGRES_USER=$POSTGRES_USER" > .env
            echo "POSTGRES_PASSWORD=$POSTGRES_PASSWORD" >> .env
            echo "POSTGRES_DB=$POSTGRES_DB" >> .env
            echo "APP_IMAGE=${APP_NAME}" >> .env
            echo "APP_TAG=$APP_TAG" >> .env

            # Run app
            sudo docker compose up --build --detach

      - name: Hit Endpoint
        run: |
          sleep 20
          curl http://localhost:3000